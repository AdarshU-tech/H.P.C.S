//This program will read a N*N matrix of integers and an element to be searched
// scatters the matrix and search element to N processes
// and and returns back the number occerances each of the N processes
//

#include <stdio.h>
#include <mpi.h>

#define MAX 25

void main(int argc, char *argv[]){
	int rank, size,i;
	int data[MAX], dataRecv[MAX], x, count=0, countTotal=0;

	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	if(rank==0){
		//read the matrix of the size N
		printf("Please enter the matrix of size N*N=%d :", size*size);
		fflush(stdout);
		for(i=0; i<size*size; i++)
			scanf("%d", &data[i]);

		//read the searchable element x
		printf("\nPlease enter the Searchable element x=");
		fflush(stdout);
		scanf("%d", &x);
	}

	//bcast the element to be searched
	MPI_Bcast(&x, 1, MPI_INT, 0, MPI_COMM_WORLD);

	//scatter the matrix with count=N
	MPI_Scatter(data, size, MPI_INT, dataRecv, size, MPI_INT, 0, MPI_COMM_WORLD);

	//in each proc leanear search for the element x and increment the count when found
	for(i=0; i<size; i++){
		//printf("\nproc %d, dataRecv[%d] = %d\n", rank, i, dataRecv[i]);
		if(dataRecv[i]==x)
			count++;
	}

	//printf("\nThis is process %d, count=%d \n", rank, count);
	MPI_Barrier(MPI_COMM_WORLD);
	
	//reduce with MPI_SUM to get the total count in the root process
	MPI_Reduce(&count, &countTotal, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

	if(rank==0){

		//print out the number of occurrence of the element x in the matrix data
		printf("Searching for %d in the matrix :", x);
		fflush(stdout);
		for(i=0; i<size*size; i++){
			if(i%size==0)
				printf("\n");
			printf("%d ", data[i]);
		}
		fflush(stdout);
		printf("\nThe total number of occurences of the element %d are : %d", x, countTotal);
	}

	MPI_Finalize();
	
}
