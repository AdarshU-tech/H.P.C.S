#include <stdio.h>
#include <mpi.h>


void main(int argc, char *argv[]){
	int rank, size;
	unsigned long int sendData, recvData, recvDataSum;
	double t1, t2, maxTime, diffTime;
	
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	t1=MPI_Wtime();		// start the time tracking for all the processes this is local for each process

	sendData=rank+1;	// each of the processes need to get the factorial for rank+1

	// get the factorial of the rank+1
	// from each of the process we get the cumulative product of rank+1 which is equal to the factorial
	MPI_Scan(&sendData, &recvData, 1, MPI_UNSIGNED_LONG, MPI_PROD, MPI_COMM_WORLD);
	//printf("\nthis is the process %d and the factorial is recvData=%d\n", rank, recvData);

	//MPI_Barrier(MPI_COMM_WORLD); 	// this is not be needed as scan is blocking
					// but it is to ensure that the factorial is present in the buffer before the next process

	// get the cumulative sum of the factorials
	MPI_Scan(&recvData, &recvDataSum, 1, MPI_UNSIGNED_LONG, MPI_SUM, MPI_COMM_WORLD);

	//MPI_Barrier(MPI_COMM_WORLD);	//not needed but to ensure that all the processes are completed

	t2=MPI_Wtime();	// end of time tracking
	diffTime=t2-t1;
	printf("\nThis is the process %d and the sum of factorial upto %d is recvData=%lu, time taken=%f\n", rank, rank+1, recvDataSum, diffTime);

	//the total time taken by the program is the sum of the individual times taken by each of the processes
	MPI_Reduce(&diffTime, &maxTime, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

	if(rank==0)
		printf("\nThe time taken by the whole process is %f\n", maxTime);

	MPI_Finalize();
	
}

